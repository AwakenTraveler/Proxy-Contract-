// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

interface OriginalDepositContract {
    function withdrawTokens(address tokenAddress, address recipient, uint256 amount) external;
    // Add other necessary functions or interfaces here
}

contract WithdrawalExample {
    using SafeMath for uint256;

    address public owner;
    OriginalDepositContract public originalContract;

    constructor(address _originalContractAddress) {
        owner = msg.sender;
        originalContract = OriginalDepositContract(_originalContractAddress);
    }

    // Withdraw tokens using OriginalDepositContract
    function withdrawTokensFromOriginalContract(address tokenAddress, address recipient, uint256 amount) external {
        require(msg.sender == owner, "Only owner can initiate token withdrawal");

        IERC20 token = IERC20(tokenAddress);

        // Check balance and approve transfer
        uint256 senderBalance = token.balanceOf(address(this));
        require(senderBalance >= amount, "Insufficient balance");

        // Transfer tokens to recipient
        bool success = token.transfer(recipient, amount);
        require(success, "Transfer failed");

        // Notify OriginalDepositContract about the withdrawal
        originalContract.withdrawTokens(tokenAddress, recipient, amount);
    }

    // Other functions and logic as needed
}
